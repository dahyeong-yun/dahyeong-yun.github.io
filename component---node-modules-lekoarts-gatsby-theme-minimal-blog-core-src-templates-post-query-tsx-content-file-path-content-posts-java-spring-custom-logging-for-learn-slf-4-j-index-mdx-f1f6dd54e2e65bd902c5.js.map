{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-java-spring-custom-logging-for-learn-slf-4-j-index-mdx-f1f6dd54e2e65bd902c5.js","mappings":"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","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post-footer.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/seo.tsx","webpack://minimal-blog/./content/posts/java-spring/custom-logging-for-learn-slf4j/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\"\nimport type { MBPostProps } from \"./post\"\n\nconst PostFooter = ({ post }: MBPostProps) => null\n\nexport default PostFooter\n","/** @jsx jsx */\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport PostFooter from \"./post-footer\"\n\nexport type MBPostProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    tags?: {\n      name: string\n      slug: string\n    }[]\n    description?: string\n    canonicalUrl?: string\n    excerpt: string\n    timeToRead?: number\n    banner?: {\n      childImageSharp: {\n        resize: {\n          src: string\n        }\n      }\n    }\n  }\n}\n\nconst px = [`16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.1) 0px ${v} ${v} 0px`)\n\nconst Post: React.FC<React.PropsWithChildren<PageProps<MBPostProps>>> = ({ data: { post }, children }) => (\n  <Layout>\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": {\n          my: [4, 4, 5],\n          borderRadius: `4px`,\n          boxShadow: shadow.join(`, `),\n          \".gatsby-resp-image-image\": {\n            borderRadius: `4px`,\n          },\n        },\n        variant: `layout.content`,\n      }}\n    >\n      {children}\n    </section>\n    <PostFooter post={post} />\n  </Layout>\n)\n\nexport default Post\n\nexport const Head: HeadFC<MBPostProps> = ({ data: { post } }) => (\n  <Seo\n    title={post.title}\n    description={post.description ? post.description : post.excerpt}\n    image={post.banner ? post.banner?.childImageSharp?.resize?.src : undefined}\n    pathname={post.slug}\n    canonicalUrl={post.canonicalUrl}\n  />\n)\n","import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Post, { Head, MBPostProps } from \"../../../components/post\"\n\nexport default function MinimalBlogCorePost({ ...props }: PageProps<MBPostProps>) {\n  return <Post {...props} />\n}\n\nexport { Head }\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <Link sx={(t) => ({ ...t.styles?.a })} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </Link>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport useSiteMetadata from \"../hooks/use-site-metadata\"\n\ntype SEOProps = {\n  title?: string\n  description?: string\n  pathname?: string\n  image?: string\n  children?: React.ReactNode\n  canonicalUrl?: string\n}\n\nconst Seo = ({\n  title = ``,\n  description = ``,\n  pathname = ``,\n  image = ``,\n  children = null,\n  canonicalUrl = ``,\n}: SEOProps) => {\n  const site = useSiteMetadata()\n\n  const {\n    siteTitle,\n    siteTitleAlt: defaultTitle,\n    siteUrl,\n    siteDescription: defaultDescription,\n    siteImage: defaultImage,\n    author,\n    siteLanguage,\n  } = site\n\n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    url: `${siteUrl}${pathname || ``}`,\n    image: `${siteUrl}${image || defaultImage}`,\n  }\n  return (\n    <>\n      <html lang={siteLanguage} />\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:image:alt\" content={seo.description} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:url\" content={seo.url} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      <meta name=\"twitter:image:alt\" content={seo.description} />\n      <meta name=\"twitter:creator\" content={author} />\n      <meta name=\"gatsby-theme\" content=\"@lekoarts/gatsby-theme-minimal-blog\" />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href={withPrefix(`/favicon-32x32.png`)} />\n      <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href={withPrefix(`/favicon-16x16.png`)} />\n      <link rel=\"apple-touch-icon\" sizes=\"180x180\" href={withPrefix(`/apple-touch-icon.png`)} />\n      {canonicalUrl ? <link rel=\"canonical\" href={canonicalUrl} /> : null}\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    sup: \"sup\",\n    a: \"a\",\n    img: \"img\",\n    em: \"em\",\n    section: \"section\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"부끄러운 말이지만 SLF4J lombok 애노테이션을 습관처럼 쓰면서도 구체적인 내용에 대해 별로 고민해본 적이 없다. 서비스 모니터링과 알람을 고민하면서 grafana와 loki 세팅을 하며 로깅 라이브러리들을 살펴보는 와중에 SLF4J가 인터페이스라는 것을 알았다. 자주 사용하는 Logback은 SLF4J를 구현한 구현체였던 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"이건 달리 보면 내가 SLF4J 의 인터페이스 형식을 이해하면 원하는 형태의 로그 적재나, 로깅 설정하면서 겪는 다양한 문제를 해결할 수 있는 실마리를 얻는 것이구나 하는 생각이 들었다. 또 grafana를 더 효과적으로 사용하기 위한 로그 라이브러리가 무엇인지 판단할 더 확실한 근거도 생길 것 같았다. 그래서 커스텀한 로깅 클래스를 만들면서 SLF4J의 구조적 이해와 직접 구현을 통해, 로깅 프레임워크의 교체 및 확장에 대한 아이디어를 얻어보기로 했다.\"), \"\\n\", React.createElement(_components.h2, null, \"SLF4J 인터페이스 구현하며 이해하기\"), \"\\n\", React.createElement(_components.h3, null, \"핵심 인터페이스 Logger 구현\"), \"\\n\", React.createElement(_components.p, null, \"SLF4J의 핵심은 \", React.createElement(_components.code, null, \"org.slf4j.Logger\"), \" 인터페이스다. 보통 우리가 코드에서 흔히 사용하는 방식은 이렇다:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"import org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\n\\n@Slf4j  // Lombok annotation\\npublic class UserService {\\n    // @Slf4j가 아래 코드를 자동으로 생성한다\\n    // private static final Logger log = LoggerFactory.getLogger(UserService.class);\\n\\n    public void createUser(String username) {\\n        log.info(\\\"Creating user: {}\\\", username);\\n        if (username == null) {\\n            log.error(\\\"Username cannot be null\\\");\\n            throw new IllegalArgumentException(\\\"Username cannot be null\\\");\\n        }\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"이때 이 Logger 인터페이스를 구현하면, 나만의 로깅 라이브러리가 생기는 것이다. 이 인터페이스가 이미 trace, debug, info, warn, error 라는 메서드 구현을 강제하고 있다. 우리가 흔하게 접하는 로깅 레벨이 바로 여기서 구분되게 되는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"이번 구현에서는 \", React.createElement(_components.code, null, \"CustomLogger\"), \" 라는 인터페이스를 구현하여 로그를 \", React.createElement(_components.code, null, \"System.out\"), \"으로 출력하는 형태를 만들어 보았다. 세부적으로 살펴보면, 먼저 \", React.createElement(_components.code, null, \"Logger\"), \" 인터페이스를 구현한 \", React.createElement(_components.code, null, \"CustomLoggerAdapter\"), \"를 만들었고, 이 클래스는 \", React.createElement(_components.code, null, \"CustomLogger\"), \" 인터페이스를 의존한다. 그리고 \", React.createElement(_components.code, null, \"CustomLoggerImpl\"), \"은 이를 구현한 클래스로, 최종적으로 \", React.createElement(_components.code, null, \"System.out.printf\"), \"를 통해 로그 형식을 출력하고 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// CustomLogger : Logger 인터페이스를 구현한 커스텀 로거\\npublic class CustomLoggerAdapter implements Logger {\\n    private final CustomLogger logger;\\n    private final String name;\\n\\n    public CustomLoggerAdapter(String name) {\\n        this.name = name;\\n        this.logger = new CustomLoggerImpl(name);\\n    }\\n\\n    @Override\\n    public String getName() {\\n        return this.name;\\n    }\\n\\n    // Trace Level\\n    @Override\\n    public boolean isTraceEnabled() {\\n        return true;\\n    }\\n\\n    @Override\\n    public void trace(String msg) {\\n        logger.debug(msg); // trace를 debug로 매핑\\n    }\\n\\n    // ...중략\\n}\\n\\n// CustomLoggerImpl : CustomLogger 인터페이스 구현체\\npublic class CustomLoggerImpl implements CustomLogger {\\n    private final String name;\\n\\n    public CustomLoggerImpl(String name) {\\n        this.name = name;\\n    }\\n\\n    /// ... 중략\\n\\n    @Override\\n    public void error(String message) {\\n        log(\\\"ERROR\\\", message);\\n    }\\n\\n    private void log(String level, String message) {\\n        System.out.printf(\\\"[%s] %s - %s: %s%n\\\",\\n                Thread.currentThread().getName(),\\n                level,\\n                name,\\n                message\\n        );\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.h3, null, \"SPI(Service Provider Interface)를 통한 연동 추가\"), \"\\n\", React.createElement(_components.p, null, \"위의 구현만 있으면 로그가 동작할까? 아직은 아니다. SLF4J는 SPI(Service, Provider Interface)\", React.createElement(_components.sup, null, React.createElement(_components.a, {\n    href: \"#user-content-fn-1\",\n    id: \"user-content-fnref-1\",\n    \"data-footnote-ref\": true,\n    \"aria-describedby\": \"footnote-label\"\n  }, \"1\")), \"를 통한 로깅 라이브러리 연동을 지원한다. 이를 위해 \", React.createElement(_components.code, null, \"resource/META-INF/services\"), \" 디렉토리에 \", React.createElement(_components.code, null, \"org.slf4j.spi.SLF4JServiceProvider\"), \" 파일을 만들어야 한다. 파일 안에는 \", React.createElement(_components.code, null, \"SLF4JServiceProvider\"), \"의 구현체 경로를 적는다. 이 프로젝트에서는 \", React.createElement(_components.code, null, \"org.cbl.clog.CustomLoggerServiceProvider\"), \" 로 기입했다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"SLF4JServiceProvider\"), \"은 SLF4J가 로깅 구현체를 동적으로 탐색하고 로깅 기능을 위임할 수 있도록 지원한다. 이를 통해 SLF4J는 특정 로깅 구현체에 의존하지 않고 유연한 방식으로 다양한 로깅 프레임워크와 연동할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"SLF4JServiceProvider\"), \"는 5개의 메서드를 구현하도록 하고 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"public interface SLF4JServiceProvider {\\n    ILoggerFactory getLoggerFactory();\\n    IMarkerFactory getMarkerFactory();\\n    MDCAdapter getMDCAdapter();\\n    String getRequestedApiVersion();\\n    void initialize();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"ILoggerFactory\"), \" 타입을 반환하는 \", React.createElement(_components.code, null, \"getLoggerFactory()\"), \"를 구현하면 이 구현체는 애플리케이션에서 로그를 남길 수 있도록 로거(Logger) 객체를 생성하고 제공하는 역할을 한다. 아래와 같은 팩토리를 반환하도록 했다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"// Logger logger = LoggerFactory.getLogger(\\\"MyLogger\\\"); 할 떄 호출되는 것\\n\\npublic class CustomLoggerFactory implements ILoggerFactory {\\n    private final ConcurrentMap<String, Logger> loggerMap;\\n\\n    public CustomLoggerFactory() {\\n        this.loggerMap = new ConcurrentHashMap<>();\\n    }\\n\\n    @Override\\n    public Logger getLogger(String name) {\\n        // computeIfAbsent를 사용하여 스레드 안전하게 로거 생성\\n        return loggerMap.computeIfAbsent(name, CustomLoggerAdapter::new);\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"나머지는 특정 구현체를 만들지는 않았다. 특정 로깅 프레임워크가 로드되지 않으면, SLF4J는 \", React.createElement(_components.code, null, \"org.slf4j.helpers\"), \" 패키지에 있는 기본 구현체(예: \", React.createElement(_components.code, null, \"BasicMarkerFactory\"), \", \", React.createElement(_components.code, null, \"BasicMDCAdapter\"), \")를 자동으로 사용한다. \", React.createElement(_components.code, null, \"IMarkerFactory\"), \" 타입을 반환하는 \", React.createElement(_components.code, null, \"getMarkerFactory()\"), \"를 통해서는 로그에 태그를 추가하는 기능을 제공하며, \", React.createElement(_components.code, null, \"MDCAdapter\"), \" 타입을 반환하는 \", React.createElement(_components.code, null, \"getMDCAdapter()\"), \"는 로그에 컨텍스트(Context) 정보 추가하는 역할을 하는데 아직 많이 사용해보지 못했다.\"), \"\\n\", React.createElement(_components.h2, null, \"결국 핵심은 추상화\"), \"\\n\", React.createElement(_components.p, null, \"이 짧은 분석을 통해 로깅 라이브러리를 만들어 보면서, 거꾸로 SLF4J 스펙을 제공하는 라이브러리라면 그 구현체를 바꾸기 위해 코드 수정이 거의 필요하지 않음을 알았다. 물론 로깅 I/O 성능, 로그 보관 정책과 같은 실무적인 요소를 고려해야 하지만, 기본적인 구조 변경에는 큰 리스크가 없다고 판단이 된다. 그러므로 로그 모니터링을 위해 JSON 형식의 로깅을 보다 쉽게 지원하는 라이브러리가 있다면, 교체를 고려해도 될 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"SLF4J가 그럼 표준으로 쓰이느냐? 하는 궁금증도 있는데, 마치 자바의 스프링처럼 사실상의 표준으로 쓰이고 있는 것 같다. 스프링 또한 인터페이스를 통한 추상화와 구현체 분리로 원하는 부분을 직접 구현할 수 있도록 되어 있으니 그 점에서 SLF4J 다르지 않은 것 같다. 아래는 SLF4J가 제공하는 다양한 로깅 구현체들과 그 연동 구조를 표현한 도식이다. 이미 다양한 구현체들에 대한 연동 방식을 고민하고 있는 것 같다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.img, {\n    src: \"https://slf4j.org/images/concrete-bindings.png\",\n    alt: \"Facade Pattern in SLF4J\"\n  }), \"\\n\", React.createElement(_components.em, null, \"출처: \", React.createElement(_components.a, {\n    href: \"https://slf4j.org/manual.html\"\n  }, \"SLF4J 공식 문서\"))), \"\\n\", React.createElement(_components.h2, null, \"마치며\"), \"\\n\", React.createElement(_components.p, null, \"별 생각없이 로그를 사용하고 있었는데 로그 인터페이스의 세계에도 흥미로운 내용이 많았다. SPI라는 방식 자체도 네이밍은 굉장히 생소했고, 이 인터페이스를 가지고 시스템 콘솔 뿐 아니라 파일 입출력에 기타 등등 원하는 기능을 넣으려면 한 세월이 걸리겠다는 결론도 얻었다. 일단 잘 만들어진 친구들을 써보도록 하자.\"), \"\\n\", React.createElement(_components.p, null, \"로그에서 또 하나 어려운 부분은 \", React.createElement(_components.code, null, \"어디서 어디까지 로그를 쌓을 것인가\"), \" 하는 것이다. 모 기업에서는 주 단위에 페타바이트 단위 이상의 로그가 쌓인다고 한다. 문제는 이 정도 트래픽을 가진 기업이라면 당연히 이를 받쳐주는 시스템도 있겠지만, 그렇지 않은 기업에서는 어떻게 해야할까? 디스크도 무한하지 않고, 무한정 늘리면 성능에 영향도 있다. 더욱이 로그에 대한 추적 문제도 있을 것이다. 서비스 운영하면서 '이런 로그 찍어둘껄' 하는 생각이 들었다면, 아직도 '적정 로그 적재 문제'에 봉착해 있다고 봐야할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"이번에 SLF4J에 대해 알아보며 로그 인터페이스에 대한 이해를 높였으니, 다음 번에는 좀 덜 기술적이면서 문제 해결의 관점에 가까운 '적정 로그 적재 문제'를 어떻게 나름대로 해결해보고 있는지 적어보고 싶다.\"), \"\\n\", React.createElement(_components.section, {\n    \"data-footnotes\": true,\n    className: \"footnotes\"\n  }, React.createElement(_components.h2, {\n    className: \"sr-only\",\n    id: \"footnote-label\"\n  }, \"Footnotes\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, {\n    id: \"user-content-fn-1\"\n  }, \"\\n\", React.createElement(_components.p, null, \"Service Provider Interface. 자바에서 제공하는 인터페이스로, 서비스 제공자가 구현해야 하는 인터페이스를 정의한다. 이를 통해 서비스 제공자는 서비스 사용자에게 서비스를 제공할 수 있다. 자바에서는 JDBC, JPA, JAX-RS 등 다양한 API에서 이를 사용한다. \", React.createElement(_components.a, {\n    href: \"#user-content-fnref-1\",\n    \"data-footnote-backref\": true,\n    className: \"data-footnote-backref\",\n    \"aria-label\": \"Back to content\"\n  }, \"↩\")), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/Users/dahyeung/Repositories/dahyeong-yun.github.io/content/posts/java-spring/custom-logging-for-learn-slf4j/index.mdx\";\nimport PostComponent, {Head} from \"../components/post\";\nPostComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"2040642971\";\n"],"names":["_ref","post","shadow","map","v","data","children","jsx","Layout","Heading","as","variant","title","sx","color","mt","a","fontSize","date","tags","React","ItemTags","timeToRead","my","borderRadius","boxShadow","join","PostFooter","Head","_ref2","_post$banner","_post$banner$childIma","_post$banner$childIma2","Seo","description","excerpt","image","banner","childImageSharp","resize","src","undefined","pathname","slug","canonicalUrl","MinimalBlogCorePost","props","Post","tagsPath","basePath","useMinimalBlogConfig","tag","i","key","Link","t","_t$styles","styles","to","replaceSlashes","name","site","useSiteMetadata","siteTitle","siteTitleAlt","defaultTitle","siteUrl","siteDescription","defaultDescription","siteImage","defaultImage","author","siteLanguage","seo","url","lang","content","property","rel","type","sizes","href","withPrefix","_createMdxContent","_components","Object","assign","p","h2","h3","code","pre","sup","img","em","section","ol","li","_provideComponents","components","className","id","alt","wrapper","MDXLayout","GatsbyMDXWrapper","PostComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}