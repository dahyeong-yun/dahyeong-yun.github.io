"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[741],{4765:function(e,n,t){t.d(n,{F:function(){return E},Z:function(){return p}});var l=t(7294),a=t(8733),r=t(795),i=t(8377),c=t(6799),m=t(8871);var u=e=>{let{post:n}=e;return null};const o=["16px","8px","4px"].map((e=>"rgba(0, 0, 0, 0.1) 0px "+e+" "+e+" 0px"));var s=e=>{let{data:{post:n},children:t}=e;return(0,a.tZ)(i.Z,null,(0,a.tZ)(r.X6,{as:"h1",variant:"styles.h1"},n.title),(0,a.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,a.tZ)("time",null,n.date),n.tags&&(0,a.tZ)(l.Fragment,null," — ",(0,a.tZ)(c.Z,{tags:n.tags})),n.timeToRead&&" — ",n.timeToRead&&(0,a.tZ)("span",null,n.timeToRead," min read")),(0,a.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:o.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},t),(0,a.tZ)(u,{post:n}))};const E=e=>{var n,t,l;let{data:{post:r}}=e;return(0,a.tZ)(m.Z,{title:r.title,description:r.description?r.description:r.excerpt,image:r.banner?null===(n=r.banner)||void 0===n||null===(t=n.childImageSharp)||void 0===t||null===(l=t.resize)||void 0===l?void 0:l.src:void 0,pathname:r.slug,canonicalUrl:r.canonicalUrl})};function p(e){let{...n}=e;return l.createElement(s,n)}},6799:function(e,n,t){var l=t(8733),a=t(7294),r=t(1883),i=t(3494),c=t(9706);n.Z=e=>{let{tags:n}=e;const{tagsPath:t,basePath:m}=(0,i.Z)();return(0,l.tZ)(a.Fragment,null,n.map(((e,n)=>(0,l.tZ)(a.Fragment,{key:e.slug},!!n&&", ",(0,l.tZ)(r.Link,{sx:e=>{var n;return{...null===(n=e.styles)||void 0===n?void 0:n.a}},to:(0,c.Z)("/"+m+"/"+t+"/"+e.slug)},e.name)))))}},8871:function(e,n,t){var l=t(7294),a=t(1883),r=t(4232);n.Z=e=>{let{title:n="",description:t="",pathname:i="",image:c="",children:m=null,canonicalUrl:u=""}=e;const o=(0,r.Z)(),{siteTitle:s,siteTitleAlt:E,siteUrl:p,siteDescription:g,siteImage:d,author:h,siteLanguage:v}=o,f={title:n?n+" | "+s:E,description:t||g,url:""+p+(i||""),image:""+p+(c||d)};return l.createElement(l.Fragment,null,l.createElement("html",{lang:v}),l.createElement("title",null,f.title),l.createElement("meta",{name:"description",content:f.description}),l.createElement("meta",{name:"image",content:f.image}),l.createElement("meta",{property:"og:title",content:f.title}),l.createElement("meta",{property:"og:url",content:f.url}),l.createElement("meta",{property:"og:description",content:f.description}),l.createElement("meta",{property:"og:image",content:f.image}),l.createElement("meta",{property:"og:type",content:"website"}),l.createElement("meta",{property:"og:image:alt",content:f.description}),l.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),l.createElement("meta",{name:"twitter:title",content:f.title}),l.createElement("meta",{name:"twitter:url",content:f.url}),l.createElement("meta",{name:"twitter:description",content:f.description}),l.createElement("meta",{name:"twitter:image",content:f.image}),l.createElement("meta",{name:"twitter:image:alt",content:f.description}),l.createElement("meta",{name:"twitter:creator",content:h}),l.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,a.withPrefix)("/favicon-32x32.png")}),l.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,a.withPrefix)("/favicon-16x16.png")}),l.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,a.withPrefix)("/apple-touch-icon.png")}),u?l.createElement("link",{rel:"canonical",href:u}):null,m)}},1904:function(e,n,t){t.r(n),t.d(n,{Head:function(){return c.F},default:function(){return m}});var l=t(7294),a=t(1151);function r(e){const n=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code",a:"a",h3:"h3",ul:"ul",li:"li",ol:"ol",hr:"hr"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h2,null,"(도입 - 흔한 실수 사례)"),"\n",l.createElement(n.p,null,"다음 주에 올라가야하는 feature에서 잘못된 Spec으로 개발되고 있다는 이야기를 들었다. Client to Server로 호출하고 있는 API가 있었는데 사실은 Server to Server로 호출이 되어야 하는 API 였던 것이다. 꽤나 경력을 가진 외주 분께 해당 API 호출을 Server to Server 방식으로 변경을 요청했다. 단순한 API 라 금방 끝날 줄 알았는데, 처음 컨트롤러에서 request를 받는 것 부터 문제를 겪고 계셨다."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell",title:"🚨 Console 창에 나오는 Spring에서 자주 보는 그 에러"},'"com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of ..."\n')),"\n",l.createElement(n.p,null,"문제는 @Builder 에 있었다. request 파라미터 역할을 하는 DTO 쪽에  클래스 스코프로 @Builder 가 생성되어 있었던 것이다. 코드를 같이 보며 @Builder 생성시에 생성자 때문에 직렬화 문제 생기는 거라고 설명을 드렸다. 그러면서 동시에 우리 팀 내에서 ",l.createElement(n.code,null,"@Builder"),"와 ",l.createElement(n.code,null,"jackson"),"의 직렬화/역직렬화 부분에 대해 충분히 설명을 해야겠다는 생각이 들었다."),"\n",l.createElement(n.h2,null,"Jackson과 @Builder의 관계"),"\n",l.createElement(n.p,null,"먼저 이해를 해야하는 것은 Spring에서 MessageConverter가 JSON을 ",l.createElement(n.a,{href:"digital-garden"},"직렬화/역직렬화")," 한다는 것이다. (MessageConverter가 Spring Web에서 동작하는 ",l.createElement(n.a,{href:"/DispatcherServelt"},"방식은 다른 포스팅"),"에서 설명)"),"\n",l.createElement(n.h3,null,"Jackson은 어떻게 객체를 만들까?"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Jackson은 JSON 데이터를 Java 객체로 변환할 때 기본적으로 다음과 같은 순서로 동작합니다:"),"\n"),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"기본 생성자를 찾아 객체를 생성"),"\n",l.createElement(n.li,null,"JSON의 각 필드값을 매핑"),"\n",l.createElement(n.li,null,"해당 필드에 값을 설정"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-javascript",title:"JSON 데이터 예시"},'// 이런 JSON 데이터가 있다고 가정해봅시다\n{\n    "name": "김개발",\n    "age": 30\n}\n\n// Jackson은 이런 클래스를 찾습니다\npublic class User {\n    private String name;\n    private int age;\n\n    // Jackson이 필요로 하는 기본 생성자\n    public User() {}\n\n    // Getter/Setter\n}\n')),"\n",l.createElement(n.h2,null,"@Builder를 사용할 때 발생하는 문제"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Lombok의 @Builder를 클래스 레벨에 적용하면 다음과 같은 변화가 일어납니다:"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-none",title:"rtets",withLineNumbers:!0},"@Builder\npublic class User {\nprivate String name;\nprivate int age;\n\n    // Lombok이 생성하는 private 생성자\n    private User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n")),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"여기서 문제가 발생합니다. Jackson이 필요로 하는 기본 생성자가 없어진 것입니다."),"\n"),"\n",l.createElement(n.h2,null,"해결 방법과 Best Practice"),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"생성자 레벨 @Builder 사용"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-java"},"public class User {\n    private final String name;\n    private final int age;\n\n    @Builder\n    public User(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Jackson을 위한 기본 생성자\n    @JsonCreator\n    public User() {\n        this.name = null;\n        this.age = 0;\n    }\n}\n")),"\n",l.createElement(n.ol,{start:"2"},"\n",l.createElement(n.li,null,"@JsonDeserialize 활용"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-java"},"@JsonDeserialize(builder = User.UserBuilder.class)\n@Builder\npublic class User {\n    private final String name;\n    private final int age;\n}\n")),"\n",l.createElement(n.h2,null,"실제 프로젝트에서의 적용"),"\n",l.createElement(n.p,null,"실제 프로젝트에서는 다음과 같은 패턴을 추천합니다:"),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"Request DTO의 경우"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,'public class UserRequest {\n    private final String name;\n    private final int age;\n\n    @Builder\n    @JsonCreator\n    public UserRequest(@JsonProperty("name") String name,\n                      @JsonProperty("age") int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n')),"\n",l.createElement(n.ol,{start:"2"},"\n",l.createElement(n.li,null,"Response DTO의 경우"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"@Value\n@Builder\npublic class UserResponse {\n    String name;\n    int age;\n\n    // Response는 직렬화만 필요하므로 별도의 처리가 필요 없습니다\n}\n")),"\n",l.createElement(n.h3,null,"성능과 관련된 고려사항"),"\n",l.createElement(n.p,null,"@Builder 사용 시 고려해야 할 성능 관련 포인트들:"),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"메모리 사용량"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Builder 클래스가 추가로 생성됨"),"\n",l.createElement(n.li,null,"객체 생성 시 중간 객체가 생성됨"),"\n"),"\n",l.createElement(n.ol,{start:"2"},"\n",l.createElement(n.li,null,"실행 시간"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"일반 생성자 대비 약간의 오버헤드 발생"),"\n",l.createElement(n.li,null,"대량의 객체 생성 시 영향이 커질 수 있음"),"\n"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,'// 성능 테스트 결과 예시\n@Test\npublic void performanceTest() {\n    long start = System.nanoTime();\n    IntStream.range(0, 1_000_000)\n        .forEach(i -> User.builder()\n            .name("test")\n            .age(20)\n            .build());\n    long builderTime = System.nanoTime() - start;\n\n    start = System.nanoTime();\n    IntStream.range(0, 1_000_000)\n        .forEach(i -> new User("test", 20));\n    long constructorTime = System.nanoTime() - start;\n\n    // 결과: Builder 패턴이 약 15-20% 더 느림\n}\n')),"\n",l.createElement(n.h2,null,"정리: 언제 @Builder를 사용해야 할까?"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"✅ 사용하면 좋은 경우:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"선택적 매개변수가 많은 경우"),"\n",l.createElement(n.li,null,"불변 객체를 만들어야 하는 경우"),"\n",l.createElement(n.li,null,"생성 과정에서 유효성 검사가 필요한 경우"),"\n"),"\n"),"\n",l.createElement(n.li,null,"\n",l.createElement(n.p,null,"❌ 피해야 할 경우:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"API 요청/응답을 위한 DTO 클래스 (클래스 레벨)"),"\n",l.createElement(n.li,null,"성능이 매우 중요한 경우"),"\n",l.createElement(n.li,null,"단순한 데이터 전달용 객체"),"\n"),"\n"),"\n"),"\n",l.createElement(n.h3,null,"마치며"),"\n",l.createElement(n.p,null,"@Builder는 분명 유용한 도구이지만, 모든 상황에 적합한 것은 아닙니다. 특히 Spring Web MVC에서 API 요청/응답을 처리할 때는 Jackson과의 상호작용을 고려해야 합니다. 이러한 이해를 바탕으로 적절한 시점에 적절한 방식으로 @Builder를 사용한다면, 더 안정적이고 유지보수하기 좋은 코드를 작성할 수 있을 것입니다."),"\n",l.createElement(n.hr),"\n",l.createElement(n.p,null,"제목: @Builder, 정말 모든 곳에 필요할까요?"),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"도입"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"흔한 실수 사례"),"\n",l.createElement(n.li,null,"왜 이런 실수가 발생하는지"),"\n"),"\n",l.createElement(n.ol,{start:"2"},"\n",l.createElement(n.li,null,"빌더 패턴의 본질"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"원래 의도된 용도"),"\n",l.createElement(n.li,null,"장단점 분석"),"\n"),"\n",l.createElement(n.ol,{start:"3"},"\n",l.createElement(n.li,null,"실제 사용 가이드라인"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"필요한 상황"),"\n",l.createElement(n.li,null,"피해야 할 상황"),"\n",l.createElement(n.li,null,"대안 제시"),"\n"),"\n",l.createElement(n.ol,{start:"4"},"\n",l.createElement(n.li,null,"성능 고려사항"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"메모리 사용량"),"\n",l.createElement(n.li,null,"객체 생성 시간"),"\n"),"\n",l.createElement(n.ol,{start:"5"},"\n",l.createElement(n.li,null,"실제 프로젝트 적용 사례"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Before/After 코드"),"\n",l.createElement(n.li,null,"개선된 점들"),"\n"),"\n",l.createElement(n.ol,{start:"6"},"\n",l.createElement(n.li,null,"결론"),"\n"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"핵심 요약"),"\n",l.createElement(n.li,null,"실천 가능한 액션 아이템"),"\n"),"\n",l.createElement(n.hr),"\n",l.createElement(n.p,null,'1/7 🚨 Spring에서 자주 보는 에러\n"com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of ..."'),"\n",l.createElement(n.p,null,"왜 발생할까요?\n바로 @Builder 때문입니다."),"\n",l.createElement(n.p,null,"2/7 원인:\nJackson은 기본 생성자가 필요한데,\n@Builder는 이를 제거해버립니다."),"\n",l.createElement(n.p,null,"3/7 해결방법:\n✅ 클래스가 아닌 생성자에 @Builder 사용\n✅ @JsonCreator 활용\n✅ @JsonDeserialize 사용"),"\n",l.createElement(n.p,null,"4/7 실제 코드로 보는 올바른 예시:\n[코드 스크린샷]"),"\n",l.createElement(n.p,null,"5/7 성능 측면에서도 차이가 있습니다:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"메모리 사용량 증가"),"\n",l.createElement(n.li,null,"객체 생성 시간 약 15-20% 증가"),"\n"),"\n",l.createElement(n.p,null,"6/7 그래서 언제 써야 할까요?\n✅ 선택적 매개변수가 많을 때\n✅ 불변 객체가 필요할 때\n❌ API 요청/응답 DTO (클래스 레벨)"),"\n",l.createElement(n.p,null,"7/7 더 자세한 내용은 블로그에서\n확인하세요!\n[링크]"),"\n",l.createElement(n.p,null,"#SpringBoot #Java #개발"),"\n",l.createElement(n.hr))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},c=t(4765);function m(e){return l.createElement(c.Z,e,l.createElement(i,e))}c.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-java-spring-builder-index-mdx-92f2a5d300884be68924.js.map